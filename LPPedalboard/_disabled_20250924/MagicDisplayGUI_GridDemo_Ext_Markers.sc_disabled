// MagicDisplayGUI_GridDemo_Ext_Markers.sc
// v0.3.0
// MD 2025-09-24 23:59 BST

/*
Purpose
- Draw bold landmarks INSIDE the right CURRENT/NEXT panel (middle-right column):
  • fuchsia border around the panel
  • yellow highlight inside the 'eff' row (anchor)
  • orange marker just BELOW the 'eff' row (clamped), or sky-blue ABOVE (on request)
- No layout mutations; absolute positioning using rightPanel / rightEff bounds.

Style
- Class extension; known-good SC only.
- Var-first and descriptive variable names in every method.
- No iteration inside drawFuncs; small, predictable overlays.
*/

+ MagicDisplayGUI_GridDemo {

  // -------- utilities: find/remove named child under rightPanel --------
  rp_findChildByName { arg childNameString;
    var foundView, childCount, childIndex, childView, nameMaybe;

    foundView = nil;
    if(rightPanel.notNil) {
      childCount = rightPanel.children.size;
      childIndex = 0;
      childCount.do({
        childView = rightPanel.children[childIndex];
        nameMaybe = if(childView.respondsTo(\name), { childView.name }, { nil });
        if(nameMaybe == childNameString) { foundView = childView };
        childIndex = childIndex + 1;
      });
    };
    ^foundView
  }

  rp_removeChildByName { arg childNameString;
    var foundView;
    foundView = this.rp_findChildByName(childNameString);
    if(foundView.notNil) { foundView.remove };
    ^this
  }

  rp_removeMarkers {
    var namesToRemove, nameString;
    namesToRemove = [ "MDG_RP_BORDER", "MDG_RP_EFF_HI", "MDG_RP_MARKER" ];
    namesToRemove.do({ arg nameStringLocal; this.rp_removeChildByName(nameStringLocal) });
    ^this
  }

  // -------- show landmarks (border + eff highlight + marker) --------
  // positionSymbol: \below (default) or \above
  rp_showMarkers { arg positionSymbol = \below, barHeight = 24;
    var showFunc;

    if(rightPanel.isNil) { "rp_showMarkers: rightPanel is nil".warn; ^this };
    if(rightEff.isNil)   { "rp_showMarkers: rightEff is nil".warn;   ^this };

    showFunc = {
      var panelBounds, effBounds;
      var borderView, effHighlightView, markerView;
      var leftInset, rightInset, gapPixels;
      var desiredTop, clampedTop, clampedHeight, markerRect;

      // clear any previous overlays
      this.rp_removeMarkers;

      panelBounds = rightPanel.bounds;
      effBounds   = rightEff.bounds;

      // 1) fuchsia border around the whole right panel
      borderView = UserView(rightPanel).name_("MDG_RP_BORDER");
      borderView.background = Color.clear;
      borderView.bounds = Rect(0, 0, panelBounds.width, panelBounds.height);
      borderView.drawFunc = { arg viewLocal;
        var viewBoundsLocal;
        viewBoundsLocal = viewLocal.bounds;
        Pen.color = Color(1.0, 0.0, 1.0, 0.70);   // fuchsia
        Pen.width = 3;
        Pen.strokeRect(Rect(1, 1, viewBoundsLocal.width - 2, viewBoundsLocal.height - 2));
      };
      borderView.front;

      // 2) yellow highlight inside eff row (anchor)
      effHighlightView = CompositeView(rightPanel).name_("MDG_RP_EFF_HI");
      effHighlightView.background = Color(1.0, 1.0, 0.0, 0.45); // yellow translucent
      effHighlightView.bounds = Rect(
        effBounds.left + 2,
        effBounds.top + 2,
        (effBounds.width - 4).max(4),
        (effBounds.height - 4).max(4)
      );
      effHighlightView.front;

      // 3) marker near eff (orange below, sky-blue above)
      leftInset  = 6;
      rightInset = 6;
      gapPixels  = 4;

      if(positionSymbol == \below) {
        desiredTop = effBounds.bottom + gapPixels;
        clampedHeight = barHeight.max(8);
        if(desiredTop + clampedHeight > panelBounds.height - 2) {
          clampedHeight = (panelBounds.height - 2 - desiredTop).max(8);
        };
        clampedTop = desiredTop.min(panelBounds.height - clampedHeight - 2).max(2);

        markerRect = Rect(
          leftInset,
          clampedTop,
          (panelBounds.width - (leftInset + rightInset)).max(8),
          clampedHeight
        );

        markerView = CompositeView(rightPanel).name_("MDG_RP_MARKER");
        markerView.background = Color(1.0, 0.50, 0.0, 0.90); // orange
        markerView.bounds = markerRect;
        markerView.front;

      } {
        // \above
        clampedHeight = barHeight.max(8);
        clampedTop = (effBounds.top - gapPixels - clampedHeight);
        if(clampedTop < 2) {
          clampedHeight = (effBounds.top - gapPixels - 2).max(8);
          clampedTop = 2;
        };

        markerRect = Rect(
          leftInset,
          clampedTop,
          (panelBounds.width - (leftInset + rightInset)).max(8),
          clampedHeight
        );

        markerView = CompositeView(rightPanel).name_("MDG_RP_MARKER");
        markerView.background = Color(0.10, 0.65, 1.0, 0.90); // sky-blue
        markerView.bounds = markerRect;
        markerView.front;
      };

      // console info for your screenshot notes
      "—— Right Panel Markers ——".postln;
      ("rightPanel.bounds:   " ++ panelBounds).postln;
      ("rightEff.bounds:     " ++ effBounds).postln;
      ("marker.bounds:       " ++ markerRect).postln;
    };

    AppClock.sched(0.0, { showFunc.value; nil });
    ^this
  }

  // -------- bring overlays to front (in case other views overlap) --------
  rp_raiseMarkers {
    var raiseFunc, namesToRaise, index, count, nameString, foundView;

    if(rightPanel.isNil) { "rp_raiseMarkers: rightPanel is nil".warn; ^this };

    raiseFunc = {
      namesToRaise = [ "MDG_RP_BORDER", "MDG_RP_EFF_HI", "MDG_RP_MARKER" ];
      count = namesToRaise.size;
      index = 0;
      count.do({
        nameString = namesToRaise[index];
        foundView = this.rp_findChildByName(nameString);
        if(foundView.notNil) { foundView.front };
        index = index + 1;
      });
    };

    AppClock.sched(0.0, { raiseFunc.value; nil });
    ^this
  }
}
