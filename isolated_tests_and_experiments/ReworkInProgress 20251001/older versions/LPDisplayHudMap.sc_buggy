// LPDisplayHudMap.sc
// v0.9.2 - dBâ†’UI mapping for meters (top/floor/gamma) + preview/print
// MD 20251001

/* Purpose
 - Provide a reusable mapping from linear RMS (0..1) to UI (0..1) using dB headroom
   and a perceptual gamma. Includes helpers to set, preview and print.
 Style
 - var-first declarations in every method block
 - lowercase method names
 - no non-local returns (^) in function blocks; normal method returns via last expr
*/

LPDisplayHudMap {
    classvar <>version;
    classvar <>defaultTopDb = -6.0, <>defaultFloorDb = -60.0, <>defaultGamma = 1.0;

    var topDb;
    var floorDb;
    var gamma;

    *initClass {
        var v;
        v = "0.9.2";
        version = v;
        ("LPDisplayHudMap v" ++ v ++ " loaded (LivePedalboardDisplay)").postln;
    }

    *new { |topDb, floorDb, gamma|
        var obj, t, f, g;
        t = topDb ?? { defaultTopDb };
        f = floorDb ?? { defaultFloorDb };
        g = gamma  ?? { defaultGamma };
        obj = super.new;
        obj.init(t, f, g);
        obj
    }

    init { |t, f, g|
        var tg;
        topDb = t.asFloat;
        floorDb = f.asFloat;
        tg = g.asFloat.max(1e-6);
        gamma = tg;
        if (topDb <= floorDb) {
            topDb = floorDb + 0.1;
            ("LPDisplayHudMap: adjusted top to floor+0.1 dB to keep mapping valid.").postln;
        };
        this
    }

    set { |key, value|
        var k, v, tmp;
        k = key.asSymbol;
        v = value.asFloat;
        if (k == \top) { topDb = v };
        if (k == \floor) { floorDb = v };
        if (k == \gamma) { gamma = v.max(1e-6) };
        if (topDb <= floorDb) {
            tmp = topDb;
            topDb = floorDb + 0.1;
            ("LPDisplayHudMap: adjusted top to floor+0.1 (was " ++ tmp ++ ")").postln;
        };
        this
    }

    mapLinToUi { |lin|
        var v, vdb, tdb, fdb, g, u;
        v = lin.max(1e-9);
        vdb = v.ampdb;
        tdb = topDb.asFloat;
        fdb = floorDb.asFloat;
        g = gamma.asFloat.max(1e-6);
        vdb = vdb.clip(fdb, tdb);
        u = (vdb - fdb) / (tdb - fdb);
        u = u.pow(g);
        u.clip(0.0, 1.0)
    }

    preview { |db|
        var lin, dbClipped, u;
        lin = db.dbamp.clip(1e-9, 1.0);
        dbClipped = lin.ampdb.clip(floorDb, topDb);
        u = (dbClipped - floorDb) / (topDb - floorDb);
        u = u.pow(gamma);
        ("HUD UI -> " ++ u.round(0.003) ++ " for " ++ db ++ " dBFS RMS").postln;
        u
    }

    print {
        ("HUD: top=" ++ topDb ++ " dB, floor=" ++ floorDb ++ " dB, gamma=" ++ gamma).postln;
        this
    }
}
