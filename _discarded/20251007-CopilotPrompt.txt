CONTEXT (2025-10-06)
- Goal: Silent-by-default bring-up using LPDisplay only; A/B chains in MagicPedalboard start with \stereoSilence.
- We want to: (1) assign \testmelodyA / \testmelodyB as tail sources, (2) see meters follow ACTIVE chain, (3) switch which chain is audible and highlight it in LPDisplay, (4) fold shims into classes + update help/docs.

WHAT HAPPENED TODAY
- Ran Run_Tomorrow_Plan_Acceptance.scd.
- LPDisplay window opened. No sound (expected), but meters did not move.
- Copilot explained likely cause: LPDisplay’s OSC responders for /peakrmsA/B not installed; taps were installed.
- Optional quick fix/harness are ready to run.

STATE OF MY TREE / FILES
- Canonical silent symbol: \stereoSilence (replaced \ts0).
- LPDisplay is the only display; window title starts with “LPDisplay …”.
- AutoMeters: taps publish to /peakrmsA (2001) and /peakrmsB (2002) in LivePedalboardSystem- AutoMeters.
- I have the TestMelodies extension installed (provides Ndef(\testmelodyA/B)).
- We have some MPB compat shims (enforceExclusiveCurrentOptionA, rebuild, rebuildUnbound, startReadyPoll), to be folded into the class proper.

DIAGNOSTICS YOU REQUESTED (PASTE RESULTS BELOW)
1) LPDisplay GUI responders present?
   - Code I ran:
     (
       var lpctl = ~system.tryPerform(\lpDisplay);
       [\rmsA_toGUI, \rmsB_toGUI].do { |k| postf("% -> %\n", k, OSCdef(k).notNil) };
       if(lpctl.notNil) { postf("lpctl has installMeterResponders? %\n", lpctl.respondsTo(\installMeterResponders)) };
     )
   - Output:

2) Can pedalboard switch API be identified?
   - Code I ran:
     (
       var pb = ~system.tryPerform(\pedalboard);
       if(pb.isNil) { "No pedalboard".warn }{
         [\switchChain, \playCurrent, \playNext, \toggleCurrent].do { |sel|
           postf("% : %\n", sel, pb.methodSelectorList.contains(sel));
         };
         [\currentChain, \currentKey].do { |sel|
           postf("% : %\n", sel, pb.respondsTo(sel));
         };
       };
     )
   - Output:

3) MagicPedalboard chain lists and playing state:
   - Code I ran:
     (
       var pb = ~system.tryPerform(\pedalboard);
       postf("A list: %\n", pb.tryPerform(\chainAList));
       postf("B list: %\n", pb.tryPerform(\chainBList));
       postf("currentChain: %\n", pb.tryPerform(\currentChain));
       postf("Ndef A playing? %  B playing? %\n", Ndef(\chainA).isPlaying, Ndef(\chainB).isPlaying);
       postf("Ndef names: %\n", Ndef.names);
     )
   - Output:

4) Do we receive /peakrms on the language side when A plays?
   - Code I ran:
     (
       s.dumpOSC(1);
       // then I made A audible per your snippet or harness
       // I will paste one example /n_set or /peakrms line here, if any
     )
   - Output (just one or two lines):

Q1: SWITCHING API — MY INTENT
- I want the canonical switching method in MagicPedalboard to be: [choose one]
  - switchChain(\A|\B)  / playCurrent / playNext / toggleCurrent / please implement switchChain(\A|\B)

Q2: READY SEMANTICS — MY INTENT
- “Ready” should be governed by CommandManager being live and listening for guitar navigation.
- We want the CommandManager to send status lines to LPDisplay’s System State pane (via LPDisplayAdapter).
- No MPB polling necessary; use display status updates.

NEXT ACTIONS REQUEST
- 1) Get meters moving with the current LPDisplay by ensuring installMeterResponders (or fallback responders) are installed.
- 2) Confirm A/B tail sources are \testmelodyA / \testmelodyB and we can audibly switch A <-> B.
- 3) Make LPDisplay ACTIVE highlight follow the audible chain.
- 4) Fold shims into MagicPedalboard and LivePedalboardSystem proper (clean class code), update *help/apihelp.
- 5) Leave a tiny utilities script for acceptance steps.

(END OF PROMPT)