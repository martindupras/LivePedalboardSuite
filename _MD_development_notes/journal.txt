


20251011
Forked SH branch to MD_Oct25. The intention is to do my changes from the "stable" known state that we had.

--

WORKING: 001 Test_LPPedalboard_Minimal -- successfully just runs to LPPedalboard and makes sound. 
    ==== CURRENT ====
    src : testmelodyA
    procs: (none)
    sink: chainA
    eff : chainA -> testmelodyA

    ==== NEXT ====
    src : testmelodyA
    procs: (none)
    sink: chainB
    eff : chainB -> testmelodyA

--
WORKING: 002  Test_LPOrchestrator_Minimal_NoDisplay.scd -- successfully runs the orchestrator's pedalboard with the display and meter. 

<AskSimon> What is the right solution here? 
When I run the orchestrator with a pedalboard, I get a DNU error because the pedalboard is trying to call a display callback that is not set.
I had to add this line: 
    lpb.setDisplay(nil);             // <<< minimal fix: avoid display callback DNU

Which means I need to fix something. 
  in LPPedalboard 
       setSourcesBoth
    calls 
        showRebuild (I think) 
    which used to be in MagicDisplay but not LPDisplay.
    </AskSimon>


WORKING: 003 Test_ChannelIdentity_AmplitudeProbe.scd

This successfully shows an Ndef that demonstrably passes multi-channel (n-in, n-out).

Full explanation in Test_ChannelIdentity_AmplitudeProbe_README.txt (Verbose and probably not needed but nice if I need to revisit.)


=======================
20251012 
Explained my project to Guy. After much discussion, I resolved that immediate best course of action is probably slightly change the operating model to this:

Orchestrator talks to everybody.
Command Manager stays as is (because it works) but possibly rework how messages are passed. (Model: /receive/action/thing/params, parsed by Orchesttrator)

Orchestrator parses messages and sends to receiver. 
Pedalbard sets up sources and outs, sets active/target updates display, make nChains do stuff
NChains new class that only handles one chain; assumes in and out are managed externally. Does simplest possible methods: add, remove; add picks from processor library; remove removes last. For now anyway.
LPProcessorLibrary stays as is (refactore by SH 20251010 - awesome).

=======================
20251013
WORKING: 004 workingReshapingNdefPassthrough.scd

Figured out that setting the Ndef to elastic and starting with maximum channel count seems to work and seems to be reliable. 

Make this canonical throughout new project. Use the makePassthrough method from NChains. Could make a class but not sure if that's necessary. 

testNChain_V0.2.scd shows how to make the chain work. We create a name for the chain, and that will be used in the Ndef names. Right now the name creates an Ndef of the same name. Need to figure out a way to create derived names so that we can have \bob_delay1 in chain \bob. 
