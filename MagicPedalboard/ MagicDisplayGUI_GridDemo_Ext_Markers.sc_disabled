// MagicDisplayGUI_GridDemo_Ext_Markers.sc
// v0.1.0
// MD 2025-09-24 23:59 BST

/*
Purpose
- Place a simple, colored rectangle as a "marker" INSIDE the right CURRENT/NEXT panel
  (middle-right column), directly BELOW the "eff:" row, without touching any layouts.
- Provide simple helpers to show/hide a thin border around the right panel and to post layout info.

Style
- Class extension only; known-good SC syntax.
- Var-first in every block; descriptive variable names (>= 3 chars).
- No layout adds; the marker is an absolutely positioned CompositeView.
*/

+ MagicDisplayGUI_GridDemo {

  // -------- remove marker if present --------
  rp_removeMarker {
    var markerView, childView, childName;

    if(rightPanel.isNil) { "rp_removeMarker: rightPanel is nil".warn; ^this };

    markerView = nil;
    rightPanel.children.do({ arg childViewLocal;
      var nameMaybe;
      nameMaybe = childViewLocal.tryPerform(\name);
      if(nameMaybe == "MDG_MARKER") { markerView = childViewLocal };
    });

    if(markerView.notNil) { markerView.remove };
    ^this
  }

  // -------- place a colored marker BELOW the 'eff:' line in the RIGHT panel --------
  rp_placeMarkerBelowEff { arg barHeight = 24, fillColor = Color(1, 0.30, 0.20, 0.90);
    var placeFunc;

    if(rightPanel.isNil) { "rp_placeMarkerBelowEff: rightPanel is nil".warn; ^this };
    if(rightEff.isNil)   { "rp_placeMarkerBelowEff: rightEff is nil".warn; ^this };

    placeFunc = {
      var panelBounds, effBounds, leftInset, rightInset, topGap, targetRect;
      var markerView;

      panelBounds = rightPanel.bounds;
      effBounds   = rightEff.bounds;

      leftInset  = 6;
      rightInset = 6;
      topGap     = 4;

      targetRect = Rect(
        leftInset,
        effBounds.bottom + topGap,
        (panelBounds.width - (leftInset + rightInset)).max(8),
        barHeight.max(8)
      );

      // remove any previous marker
      this.rp_removeMarker;

      // create a simple colored view at the computed rectangle
      markerView = CompositeView(rightPanel).name_("MDG_MARKER");
      markerView.background = fillColor;
      markerView.bounds = targetRect;
      markerView.front;  // ensure on top

      ("[marker] placed at " ++ targetRect).postln;
    };

    // schedule after 0 so layout has a chance to settle
    AppClock.sched(0.0, { placeFunc.value; nil });
    ^this
  }

  // -------- raise marker to front (if it was covered) --------
  rp_raiseMarker {
    var markerView;

    if(rightPanel.isNil) { "rp_raiseMarker: rightPanel is nil".warn; ^this };

    markerView = nil;
    rightPanel.children.do({ arg childViewLocal;
      var nameMaybe;
      nameMaybe = childViewLocal.tryPerform(\name);
      if(nameMaybe == "MDG_MARKER") { markerView = childViewLocal };
    });

    if(markerView.notNil) { markerView.front };
    ^this
  }

  // -------- toggle a thin border overlay around the RIGHT panel (no child iteration) --------
  rp_showRightPanelBorder { arg showBorder = true;
    var ensureFunc;

    if(rightPanel.isNil) { "rp_showRightPanelBorder: rightPanel is nil".warn; ^this };

    ensureFunc = {
      var existingOverlay, borderView;

      // remove existing
      existingOverlay = nil;
      rightPanel.children.do({ arg childViewLocal;
        var nameMaybe;
        nameMaybe = childViewLocal.tryPerform(\name);
        if(nameMaybe == "MDG_BORDER_OVERLAY") { existingOverlay = childViewLocal };
      });
      if(existingOverlay.notNil) { existingOverlay.remove };

      if(showBorder) {
        borderView = UserView(rightPanel).name_("MDG_BORDER_OVERLAY");
        borderView.background = Color.clear;

        // place full-panel; use current bounds (no layout control)
        borderView.bounds = Rect(0, 0, rightPanel.bounds.width, rightPanel.bounds.height);

        borderView.drawFunc = { arg viewLocal;
          var viewBounds;
          viewBounds = viewLocal.bounds;
          Pen.color = Color(1, 0, 0, 0.40);
          Pen.width = 2;
          Pen.strokeRect(Rect(1, 1, viewBounds.width - 2, viewBounds.height - 2));
        };

        borderView.front;
      };
    };

    AppClock.sched(0.0, { ensureFunc.value; nil });
    ^this
  }

  // -------- print simple layout info for key right-panel subviews --------
  rp_postRightPanelLayoutReport {
    var postFunc;

    if(rightPanel.isNil) { "rp_postRightPanelLayoutReport: rightPanel is nil".warn; ^this };

    postFunc = {
      var markerView;

      "—— Right Panel Layout ——".postln;
      ("rightPanel.bounds:     " ++ rightPanel.bounds).postln;

      if(this.respondsTo(\rightHeader) and: { rightHeader.notNil }) {
        ("rightHeader.bounds:    " ++ rightHeader.bounds).postln;
      };

      if(this.respondsTo(\rightListView) and: { rightListView.notNil }) {
        ("rightListView.bounds:  " ++ rightListView.bounds).postln;
      };

      if(rightEff.notNil) {
        ("rightEff.bounds:       " ++ rightEff.bounds).postln;
      };

      markerView = nil;
      rightPanel.children.do({ arg childViewLocal;
        var nameMaybe;
        nameMaybe = childViewLocal.tryPerform(\name);
        if(nameMaybe == "MDG_MARKER") { markerView = childViewLocal };
      });
      if(markerView.notNil) {
        ("marker.bounds:         " ++ markerView.bounds).postln;
      };
    };

    AppClock.sched(0.0, { postFunc.value; nil });
    ^this
  }
}
