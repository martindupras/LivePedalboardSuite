// MagicDisplayGUI_GridDemo_Ext_Probes.sc
// v0.2.0
// MD 2025-09-24 23:45 BST

/*
Purpose
- Visually verify placement in the middle-right grey column (right CURRENT/NEXT panel)
  by drawing a colored rectangle *below* the "eff:" label (without touching the bottom
  processors HUD).
- Provide a toggleable overlay that draws colored outlines around the right panel's children,
  so we can confirm the actual layout geometry.
- Post a small layout report (bounds) for the right panel and key subviews.

Style
- Class extension only; known-good SuperCollider syntax.
- Var-first in every block; descriptive variable names (>= 3 characters).
- AppClock for UI updates; no server.sync; no nonstandard APIs.
*/

+ MagicDisplayGUI_GridDemo {

  // ------- remove the probe overlay (if present) -------
  rp_removeProbeOverlay {
    var overlayView;

    if(rightPanel.isNil) { "rp_removeProbeOverlay: rightPanel is nil".warn; ^this };

    overlayView = rightPanel.children.detect({ arg childView;
      var childName;
      childName = childView.tryPerform(\name);
      ^(childName == "MDG_OVERLAY_PROBE");
    });

    if(overlayView.notNil) { overlayView.remove };
    ^this
  }

  // ------- add a colored rectangle overlay below the "eff:" line in the RIGHT panel -------
  rp_addProbeOverlay { arg barHeight = 24, fillColor = Color(1, 0.35, 0.15, 0.90);
    var panelGridLayout, overlayUserView, addOverlayFunc;

    if(rightPanel.isNil) { "rp_addProbeOverlay: rightPanel is nil".warn; ^this };
    panelGridLayout = rightPanel.layout;
    if(panelGridLayout.isNil) { "rp_addProbeOverlay: rightPanel.layout is nil".warn; ^this };

    addOverlayFunc = {
      var rowsToSpan;

      // Clean any previous probe overlay
      this.rp_removeProbeOverlay;

      // Create an overlay UserView that spans the entire right panel grid
      rowsToSpan = 32; // big enough to cover all rows
      overlayUserView = UserView(rightPanel).name_("MDG_OVERLAY_PROBE");
      overlayUserView.background = Color.clear;
      panelGridLayout.add(overlayUserView, 0, 0, rowsToSpan, 1);

      overlayUserView.drawFunc = { arg view;
        var panelBounds, effBounds, probeRect, leftInset, rightInset, topGap, textRect;

        // var-first inside drawFunc
        panelBounds = rightPanel.bounds;
        effBounds   = rightEff.bounds;   // same parent => same coordinate space
        leftInset   = 6;
        rightInset  = 6;
        topGap      = 4;

        probeRect = Rect(
          leftInset,
          effBounds.bottom + topGap,
          panelBounds.width - (leftInset + rightInset),
          barHeight.max(8)
        );

        // fill rectangle
        Pen.color = fillColor;
        Pen.addRect(probeRect);
        Pen.fill;

        // border around the probe
        Pen.color = Color(0, 0, 0, 0.45);
        Pen.strokeRect(probeRect);

        // center "PROBE" label in the rectangle
        textRect = probeRect.insetBy(2, 2);
        Pen.stringAt("PROBE", textRect.center, Font.default, Color.white, \center);
      };
    };

    AppClock.sched(0.0, { addOverlayFunc.value; nil });
    ^this
  }

  // ------- toggle a grid debug overlay for the RIGHT panel (colored outlines) -------
  rp_showRightPanelGridDebug { arg showOverlay = true;
    var panelGridLayout, existingOverlay, addOverlayFunc, removeOverlayFunc;

    if(rightPanel.isNil) { "rp_showRightPanelGridDebug: rightPanel is nil".warn; ^this };
    panelGridLayout = rightPanel.layout;
    if(panelGridLayout.isNil) { "rp_showRightPanelGridDebug: rightPanel.layout is nil".warn; ^this };

    removeOverlayFunc = {
      var overlayView;

      overlayView = rightPanel.children.detect({ arg childView;
        var childName;
        childName = childView.tryPerform(\name);
        ^(childName == "MDG_GRID_OVERLAY");
      });

      if(overlayView.notNil) { overlayView.remove };
    };

    addOverlayFunc = {
      var rowsToSpan, outlineUserView;

      // remove any previous instance first
      removeOverlayFunc.value;

      rowsToSpan = 32;
      outlineUserView = UserView(rightPanel).name_("MDG_GRID_OVERLAY");
      outlineUserView.background = Color.clear;
      panelGridLayout.add(outlineUserView, 0, 0, rowsToSpan, 1);

      outlineUserView.drawFunc = { arg view;
        var panelBounds, childList;

        panelBounds = view.bounds;
        childList   = rightPanel.children;

        // outer red border (entire right panel area)
        Pen.color = Color(1, 0, 0, 0.35);
        Pen.width = 2;
        Pen.strokeRect(Rect(1, 1, panelBounds.width - 2, panelBounds.height - 2));

        // green rectangles around each child of rightPanel (exclude this overlay)
        Pen.width = 1.5;
        childList.do({ arg childView, childIndex;
          var childName, childBounds;
          childName  = childView.tryPerform(\name);
          if(childName != "MDG_GRID_OVERLAY") {
            childBounds = childView.bounds; // same parent → same coordinate space
            Pen.color = Color(0, 0.8, 0, 0.35);
            Pen.strokeRect(Rect(
              childBounds.left + 1,
              childBounds.top + 1,
              childBounds.width - 2,
              childBounds.height - 2
            ));
          };
        });
      };
    };

    AppClock.sched(0.0, {
      if(showOverlay) { addOverlayFunc.value } { removeOverlayFunc.value };
      nil
    });
    ^this
  }

  // ------- post a short layout report for right panel & key subviews -------
  rp_postRightPanelLayoutReport {
    var postFunc;

    if(rightPanel.isNil) { "rp_postRightPanelLayoutReport: rightPanel is nil".warn; ^this };

    postFunc = {
      var probeOverlay, gridOverlay;

      "—— Right Panel Layout ——".postln;
      ("rightPanel.bounds:     "  ++ rightPanel.bounds).postln;
      ("rightHeader.bounds:    "  ++ rightHeader.bounds).postln;
      ("rightListView.bounds:  "  ++ rightListView.bounds).postln;
      ("rightEff.bounds:       "  ++ rightEff.bounds).postln;

      probeOverlay = rightPanel.children.detect({ arg childView;
        var childName;
        childName = childView.tryPerform(\name);
        ^(childName == "MDG_OVERLAY_PROBE");
      });
      if(probeOverlay.notNil) {
        ("probeOverlay.bounds:   " ++ probeOverlay.bounds).postln;
      };

      gridOverlay = rightPanel.children.detect({ arg childView;
        var childName;
        childName = childView.tryPerform(\name);
        ^(childName == "MDG_GRID_OVERLAY");
      });
      if(gridOverlay.notNil) {
        ("gridOverlay.bounds:    " ++ gridOverlay.bounds).postln;
      };
    };

    AppClock.sched(0.0, { postFunc.value; nil });
    ^this
  }
}
