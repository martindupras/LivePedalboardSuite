// CommandManager.sc
// v1.4
// MD 2025-09-21 22:05

// Purpose: Central controller; uses injected display (MagicDisplayGUI), does NOT create windows.
// Style: var-first, AppClock .defer for UI, no server.sync.

CommandManager {
    var <>currentState;
    var <>tree;
    var <>builder;
    var <>queue;
    var <>display, <>displayText;
    var <>filePath;
    var <>midiManager;
    var <>parentCommandManager;
    var <>saver;
    var <>queueExportCallback;

    var launchpadHandler, footControllerHandler, guitarHandler;
    var <>launchpadID, <>footControllerID, <>guitarID;

    *new { arg treePath;
        ^super.new.init(treePath);
    }

    init { arg treePath;
        var defaultPath;
        if (true) { "CommandManager created".postln };
        currentState = \idle;

        saver = CircularFileSave.new("myTree", "~/CommandTreeSavefiles", 10);

        defaultPath = Platform.userExtensionDir ++ "/MDclasses/LivePedalboardSystem/MagicPedalboardCommandTree.json";
        filePath = treePath.ifNil { defaultPath };

        this.createNewTree;
        this.createBuilder;
        this.createCommandQueue;

        // IMPORTANT: Do NOT create a UserDisplay here; we will inject MagicDisplayGUI
        // display = UserDisplay.new;   // <-- REMOVE/COMMENT OUT THIS LINE

        midiManager = MIDIInputManager.new(builder, nil, nil, nil);
        midiManager.parentCommandManager = this;

        ^this
    }

    // ... your createNewTree/createBuilder/createCommandQueue stay unchanged ...

    setStatus { arg text;
        // If a MagicDisplayGUI is injected, use showExpectation
        if (display.notNil and: { display.respondsTo(\showExpectation) }) {
            display.showExpectation(text, 0);
        }{
            // Fallback to console if no GUI is injected
            ("Status: " ++ text).postln;
        }
    }

    reloadTreeFromPath { arg path;
        if (path.notNil) { filePath = path; };
        this.createNewTree;
        builder = MDCommandBuilder.new(tree);
        this.setStatus("âœ… Tree reloaded from: " ++ filePath);
    }
}

MDCommandMC : CommandManager {}
